{"ast":null,"code":"import { configureStore, createAction, createReducer, createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from 'nanoid';\nconst initialState = [{\n  id: 'id-1',\n  name: 'Rosie Simpson',\n  number: '459-12-56'\n}, {\n  id: 'id-2',\n  name: 'Hermione Kline',\n  number: '443-89-12'\n}, {\n  id: 'id-3',\n  name: 'Eden Clements',\n  number: '645-17-79'\n}, {\n  id: 'id-4',\n  name: 'Annie Copeland',\n  number: '227-91-26'\n}];\n\n// export const addContacts = createAction('addContacts', (name,number) => {\n//     return {\n//         payload: {\n//             name: name,\n//             number:number,\n//             id: nanoid(),\n//         },\n//     };\n// });\n//  export const deleteContacts = createAction('deleteContacts');\n// const myReducer = createReducer(initialState, builder => {\n//     builder\n//         .addCase(addContacts, (state, action) => { return [...state, action.payload] })\n//         .addCase(deleteContacts, (state, action) => { return state.filter(contact => contact.id !== action.payload) })\n// });\nconst counterSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n    addContacts: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(name, number) {\n        return {\n          payload: {\n            name: name,\n            number: number,\n            id: nanoid()\n          }\n        };\n      }\n    },\n    deleteContacts(state, action) {\n      return state.filter(contact => contact.id !== action.payload);\n    }\n  }\n});\nexport const store = configureStore({\n  reducer: {\n    contacts: counterSlice.reducer\n  }\n\n  // reducer: {\n  //     contacts: [],\n  //     filter: \"\"\n  // }\n});\n\nexport const {\n  addContacts,\n  deleteContacts\n} = counterSlice.actions;","map":{"version":3,"names":["configureStore","createAction","createReducer","createSlice","nanoid","initialState","id","name","number","counterSlice","reducers","addContacts","reducer","state","action","push","payload","prepare","deleteContacts","filter","contact","store","contacts","actions"],"sources":["/Users/valentynadumbrava/Desktop/goit-react-hw-06-phonebook/src/store/store.js"],"sourcesContent":["import { configureStore, createAction, createReducer, createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from 'nanoid';\n\nconst initialState = [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n]\n\n// export const addContacts = createAction('addContacts', (name,number) => {\n//     return {\n//         payload: {\n//             name: name,\n//             number:number,\n//             id: nanoid(),\n//         },\n//     };\n// });\n//  export const deleteContacts = createAction('deleteContacts');\n// const myReducer = createReducer(initialState, builder => {\n//     builder\n//         .addCase(addContacts, (state, action) => { return [...state, action.payload] })\n//         .addCase(deleteContacts, (state, action) => { return state.filter(contact => contact.id !== action.payload) })\n// });\nconst counterSlice = createSlice({\n    name: 'contacts',\n    initialState,\n    reducers: {\n        addContacts: {\n            reducer(state, action) { state.push(action.payload) },\n            prepare(name, number) {\n                return {\n                    payload: {\n                        name: name,\n                        number: number,\n                        id: nanoid(),\n                    },\n                };\n            },\n        },\n    \n        deleteContacts(state, action) { return state.filter(contact => contact.id !== action.payload) }\n    }\n})\nexport const store = configureStore({\n    reducer: {\n        contacts: counterSlice.reducer,\n\n    }\n\n    // reducer: {\n    //     contacts: [],\n    //     filter: \"\"\n    // }\n})\nexport const { addContacts, deleteContacts } = counterSlice.actions;"],"mappings":"AAAA,SAASA,cAAc,EAAEC,YAAY,EAAEC,aAAa,EAAEC,WAAW,QAAQ,kBAAkB;AAC3F,SAASC,MAAM,QAAQ,QAAQ;AAE/B,MAAMC,YAAY,GAAG,CACjB;EAAEC,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,eAAe;EAAEC,MAAM,EAAE;AAAY,CAAC,EAC1D;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,gBAAgB;EAAEC,MAAM,EAAE;AAAY,CAAC,EAC3D;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,eAAe;EAAEC,MAAM,EAAE;AAAY,CAAC,EAC1D;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,gBAAgB;EAAEC,MAAM,EAAE;AAAY,CAAC,CAC9D;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGN,WAAW,CAAC;EAC7BI,IAAI,EAAE,UAAU;EAChBF,YAAY;EACZK,QAAQ,EAAE;IACNC,WAAW,EAAE;MACTC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;QAAED,KAAK,CAACE,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAAC,CAAC;MACrDC,OAAOA,CAACV,IAAI,EAAEC,MAAM,EAAE;QAClB,OAAO;UACHQ,OAAO,EAAE;YACLT,IAAI,EAAEA,IAAI;YACVC,MAAM,EAAEA,MAAM;YACdF,EAAE,EAAEF,MAAM,CAAC;UACf;QACJ,CAAC;MACL;IACJ,CAAC;IAEDc,cAAcA,CAACL,KAAK,EAAEC,MAAM,EAAE;MAAE,OAAOD,KAAK,CAACM,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACd,EAAE,KAAKQ,MAAM,CAACE,OAAO,CAAC;IAAC;EAClG;AACJ,CAAC,CAAC;AACF,OAAO,MAAMK,KAAK,GAAGrB,cAAc,CAAC;EAChCY,OAAO,EAAE;IACLU,QAAQ,EAAEb,YAAY,CAACG;EAE3B;;EAEA;EACA;EACA;EACA;AACJ,CAAC,CAAC;;AACF,OAAO,MAAM;EAAED,WAAW;EAAEO;AAAe,CAAC,GAAGT,YAAY,CAACc,OAAO"},"metadata":{},"sourceType":"module"}